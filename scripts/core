export VM_IMAGE_DIR=${VM_IMAGE_DIR:-"${HOME}/automata/virsh"}


declare -A operator_groups
operator_groups[ubuntu_22_04]=sudo
operator_groups[ubuntu_24_04]=sudo
operator_groups[rocky_9_4]=users,wheel,adm,systemd-journal
operator_groups[rocky_9_5]=users,wheel,adm,systemd-journal
operator_groups[rocky_9_6]=users,wheel,adm,systemd-journal
operator_groups[ubi_9_5]=users,wheel,adm,systemd-journal
operator_groups[ubi_9_6]=users,wheel,adm,systemd-journal
operator_groups[fedora_40]=users,wheel,adm,systemd-journal
operator_groups[fedora_41]=users,wheel,adm,systemd-journal
operator_groups[alpine_3_21]=wheel


declare -A post_command
post_command[ubuntu_22_04]="sudo ufw disable;sudo ufw stop;  sudo apt-get update -y; sudo apt-get install -y qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubuntu_24_10]="sudo ufw disable;sudo ufw stop; sudo apt-get update -y; sudo apt-get install -y qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubuntu_24_04]="sudo ufw disable;sudo ufw stop; sudo apt-get update -y; sudo apt-get install -y qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[rocky_9_4]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[rocky_9_5]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[rocky_9_6]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubi_9_5]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubi_9_6]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[fedora_40]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[fedora_41]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[alpine_3_21]="echo '%wheel ALL=(ALL) ALL' > /etc/sudoers.d/wheel;sudo apk update; sudo apk add --no-cache qemu-guest-agent; sudo rc-update add qemu-guest-agent boot; sudo rc-service qemu-guest-agent start"



# This one needs internet.
function airgap_update {
 echo "NOT IMPLEMENTED YET"
 osversion=$1
# airgap_media ${osversion}

# TODO implement
# Start a kvm with the osversion image , inject an upgrade command that only downloading packages.
# ubuntu apt install apt-offline  , check out https://askubuntu.com/questions/990350/ubuntu-software-installation-in-air-gapped-environments
# debian yum -y install yum-utils  , check out https://www.bomzan.com/2023/02/22/patching-air-gapped-redhat-systems/
}

function add_nvme_to_xml() {
    local HOSTNAME=$1
    local NVME=${2:-0}   # number of NVMe disks
    local XML_FILE="${VM_IMAGE_DIR}/xml/${HOSTNAME}.xml"

    if [ "$NVME" -le 0 ]; then
        return
    fi

    # 1️⃣ Add NVMe controller
    xmlstarlet ed -L \
      -s "/domain/devices" -t elem -n controllerTMP -v "" \
      -i "//controllerTMP" -t attr -n type -v nvme \
      -i "//controllerTMP" -t attr -n model -v nvme \
      -r "//controllerTMP" -v controller \
      "$XML_FILE"

    # 2️⃣ Add NVMe disks
    for i in $(seq 1 $NVME); do
        xmlstarlet ed -L \
          -s "/domain/devices" -t elem -n diskTMP -v "" \
          -i "//diskTMP" -t attr -n type -v file \
          -i "//diskTMP" -t attr -n device -v disk \
          -s "//diskTMP" -t elem -n driver -v "" \
          -i "//diskTMP/driver" -t attr -n name -v qemu \
          -i "//diskTMP/driver" -t attr -n type -v qcow2 \
          -s "//diskTMP" -t elem -n source -v "" \
          -i "//diskTMP/source" -t attr -n file -v "${VM_IMAGE_DIR}/images/${HOSTNAME}-nvme${i}.qcow2" \
          -s "//diskTMP" -t elem -n target -v "" \
          -i "//diskTMP/target" -t attr -n dev -v "nvme0n${i}" \
          -i "//diskTMP/target" -t attr -n bus -v nvme \
          -r "//diskTMP" -v disk \
          "$XML_FILE"
    done
}
