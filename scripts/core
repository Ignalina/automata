export VM_IMAGE_DIR=${VM_IMAGE_DIR:-"${HOME}/automata/virsh"}


declare -A operator_groups
operator_groups[ubuntu_22_04]=sudo
operator_groups[ubuntu_24_04]=sudo
operator_groups[rocky_9_4]=users,wheel,adm,systemd-journal
operator_groups[rocky_9_5]=users,wheel,adm,systemd-journal
operator_groups[rocky_9_6]=users,wheel,adm,systemd-journal
operator_groups[ubi_9_5]=users,wheel,adm,systemd-journal
operator_groups[ubi_9_6]=users,wheel,adm,systemd-journal
operator_groups[fedora_40]=users,wheel,adm,systemd-journal
operator_groups[fedora_41]=users,wheel,adm,systemd-journal
operator_groups[alpine_3_21]=wheel


declare -A post_command
post_command[ubuntu_22_04]="sudo ufw disable;sudo ufw stop;  sudo apt-get update -y; sudo apt-get install -y qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubuntu_24_10]="sudo ufw disable;sudo ufw stop; sudo apt-get update -y; sudo apt-get install -y qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubuntu_24_04]="sudo ufw disable;sudo ufw stop; sudo apt-get update -y; sudo apt-get install -y qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[rocky_9_4]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[rocky_9_5]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[rocky_9_6]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubi_9_5]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[ubi_9_6]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[fedora_40]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[fedora_41]="setenforce 0;sed -i 's/enforcing/permissive/g' /etc/selinux/config;sudo dnf -y makecache; sudo dnf -y install qemu-guest-agent; sudo systemctl enable --now qemu-guest-agent"
post_command[alpine_3_21]="echo '%wheel ALL=(ALL) ALL' > /etc/sudoers.d/wheel;sudo apk update; sudo apk add --no-cache qemu-guest-agent; sudo rc-update add qemu-guest-agent boot; sudo rc-service qemu-guest-agent start"

# Maps OS keys to virt-install --os-type
declare -A OS_TYPE
OS_TYPE[ubuntu_22_04]=linux
OS_TYPE[ubuntu_24_04]=linux
OS_TYPE[ubuntu_24_10]=linux
OS_TYPE[rocky_9_4]=linux
OS_TYPE[rocky_9_5]=linux
OS_TYPE[rocky_9_6]=linux
OS_TYPE[ubi_9_5]=linux
OS_TYPE[ubi_9_6]=linux
OS_TYPE[fedora_40]=linux
OS_TYPE[fedora_41]=linux
OS_TYPE[alpine_3_21]=linux

# Maps OS keys to virt-install --os-variant
declare -A OS_VARIANT
OS_VARIANT[ubuntu_22_04]=ubuntu22.04
OS_VARIANT[ubuntu_24_04]=ubuntu24.04
OS_VARIANT[ubuntu_24_10]=ubuntu24.10
OS_VARIANT[rocky_9_4]=rocky9.4
OS_VARIANT[rocky_9_5]=rocky9.5
OS_VARIANT[rocky_9_6]=rocky9.6
OS_VARIANT[ubi_9_5]=ubi9.5
OS_VARIANT[ubi_9_6]=ubi9.6
OS_VARIANT[fedora_40]=fedora40
OS_VARIANT[fedora_41]=fedora41
OS_VARIANT[alpine_3_21]=alpine3.21




# This one needs internet.
function airgap_update {
 echo "NOT IMPLEMENTED YET"
 osversion=$1
# airgap_media ${osversion}

# TODO implement
# Start a kvm with the osversion image , inject an upgrade command that only downloading packages.
# ubuntu apt install apt-offline  , check out https://askubuntu.com/questions/990350/ubuntu-software-installation-in-air-gapped-environments
# debian yum -y install yum-utils  , check out https://www.bomzan.com/2023/02/22/patching-air-gapped-redhat-systems/
}

# Inject NVMe drives via qemu:commandline
function add_nvme_qemu_cmdlineOLD() {
    local HOSTNAME=$1
    local NVME=${2:-0}
    local XML_FILE="${VM_IMAGE_DIR}/xml/${HOSTNAME}.xml"

    if [ "$NVME" -le 0 ]; then
        return
    fi

    # create qemu:commandline root element if missing
    if ! grep -q "<qemu:commandline" "$XML_FILE"; then
        xmlstarlet ed -L \
            -s "/domain/devices" -t elem -n qemuCMD -v "" \
            -r "//qemuCMD" -v "qemu:commandline" \
            -i "//qemu:commandline" -t attr -n 'xmlns:qemu' -v 'http://libvirt.org/schemas/domain/qemu/1.0' \
            "$XML_FILE"
    fi

    # add NVMe drives
    for i in $(seq 1 $NVME); do
        xmlstarlet ed -L \
            -s "//qemu:commandline" -t elem -n argTMP -v "-drive" \
            -r "//argTMP" -v "qemu:arg" \
            -i "//qemu:arg[last()]" -t attr -n value -v "file=${VM_IMAGE_DIR}/images/${HOSTNAME}-nvme${i}.qcow2,format=qcow2,if=none,id=NVME${i}" \
            "$XML_FILE"

        xmlstarlet ed -L \
            -s "//qemu:commandline" -t elem -n argTMP -v "-device" \
            -r "//argTMP[last()]" -v "qemu:arg" \
            -i "//qemu:arg[last()]" -t attr -n value -v "nvme,drive=NVME${i},serial=nvme-${i}" \
            "$XML_FILE"
    done
}

function add_nvme_qemu_cmdline() {
    local HOSTNAME=$1
    local NVME=${2:-0}
    local XML_FILE="${VM_IMAGE_DIR}/xml/${HOSTNAME}.xml"

    if [ "$NVME" -le 0 ]; then
        return
    fi

    # Ensure <domain> tag has xmlns:qemu namespace
    if ! grep -q "xmlns:qemu=" "$XML_FILE"; then
        xmlstarlet ed -L \
            -i "/domain" -t attr -n "xmlns:qemu" -v "http://libvirt.org/schemas/domain/qemu/1.0" \
            "$XML_FILE"
    fi

    # Ensure <qemu:commandline> exists under <devices>
    if ! grep -q "<qemu:commandline" "$XML_FILE"; then
        xmlstarlet ed -L \
            -s "/domain/devices" -t elem -n "qemu:commandline" -v "" \
            "$XML_FILE"
    fi

    # Add NVMe drives
    for i in $(seq 1 "$NVME"); do
        xmlstarlet ed -L \
            -s "//qemu:commandline" -t elem -n "qemu:arg" -v "" \
            -i "//qemu:arg[last()]" -t attr -n "value" -v "-drive file=${VM_IMAGE_DIR}/images/${HOSTNAME}-nvme${i}.qcow2,format=qcow2,if=none,id=NVME${i}" \
            "$XML_FILE"

        xmlstarlet ed -L \
            -s "//qemu:commandline" -t elem -n "qemu:arg" -v "" \
            -i "//qemu:arg[last()]" -t attr -n "value" -v "-device nvme,drive=NVME${i},serial=nvme-${i}" \
            "$XML_FILE"
    done
}
function set_vm_machine_q35() {
    local HOSTNAME=$1
    local XML_FILE="${VM_IMAGE_DIR}/xml/${HOSTNAME}.xml"

    # Ensure <os type="..."> has machine="pc-q35-questing" and arch="x86_64"
    xmlstarlet ed -L \
        -u "/domain/os/type/@machine" -v "pc-q35-questing" \
        -u "/domain/os/type/@arch" -v "x86_64" \
        "$XML_FILE"
}
